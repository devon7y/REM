% REM Memory Simulation Script (Shiffrin & Steyvers, 1997)
% This script simulates a basic recognition memory experiment
% using the core principles of the REM model, including feature
% representation, probabilistic storage, likelihood ratio calculation,
% and decision making based on the average likelihood ratio (phi)

% Set a seed for testing purposes
rng(69); % Keep this for reproducibility of a specific run

% --- Define Model and Simulation Parameters ---
disp('--- REM Model Simulation ---');
disp('Parameters:');

% Model Parameters (from Shiffrin & Steyvers, 1997, default values)
% The number of features that the geometric distribution contains
% Default 1000
param.num_total_features = 1000;
fprintf('  Number of total features: %d\n', param.num_total_features);

% 'w' - The number of non-zero features that define a word
% Default 20
param.w_word_features = 20;
fprintf('  Number of word features (w): %d\n', param.w_word_features);

% 'g' - The geometric distribution parameter for feature values
% Default 0.4
param.g = 0.4;
fprintf('  Geometric distribution parameter (g): %.2f\n', param.g);

% 'u*' - The probability of storing a feature per storage attempt
% Default 0.04
param.u_star = 0.04;
fprintf('  Probability of storing a feature per attempt (u*): %.2f\n', param.u_star);

% 't' - The number of storage attempts (the units of time a word is studied)
% Default 10
param.t = 10;
fprintf('  Number of storage attempts (t): %d\n', param.t);

% 'c' - The probability that a word is copied correctly, assuming it the feature is stored
% Default 0.7
param.c = 0.7;
fprintf('  Probability of correct copy (c): %.2f\n', param.c);

% The threshold for 'old' versus 'new' responses (phi >= criterion)
% Default 1.0
% This is the single criterion for P(H)/P(F) and d' calculations
% The NRS slope calculations use different criteria defined in log_criteria
param.criterion = 1.0;
fprintf('  Recognition criterion: %.1f\n', param.criterion);

% Define the specific log-criteria used in the paper for ROC curve generation (for NRS)
log_criteria = [1.0, -0.8, -0.7, -0.2, 0, 0.2, 0.7, 1.0, 1.25, 1.75, 2.5];
roc_criteria = exp(log_criteria);

% List lengths to simulate
% Default [4, 10, 20, 40, 80] from Figure 3
sim.list_lengths_to_simulate = [4, 10, 20, 40, 80];

% Number of internal simulation runs to average results over for a single point
sim.num_simulations_per_point = 1000;
fprintf('  Number of internal simulations per point: %d\n', sim.num_simulations_per_point);

% Number of repetitions to run the entire simulation for standard error of the mean error bar calculation
sim.num_repetitions_for_error_bars = 100;
fprintf('  Number of repetitions for error bars: %d\n', sim.num_repetitions_for_error_bars);

% --- Initialize Storage for Data and Error Bars ---
num_list_lengths = length(sim.list_lengths_to_simulate);

% Store results for each repetition for each list length
all_reps_PH = zeros(num_list_lengths, sim.num_repetitions_for_error_bars);
all_reps_PF = zeros(num_list_lengths, sim.num_repetitions_for_error_bars);
all_reps_d_prime = zeros(num_list_lengths, sim.num_repetitions_for_error_bars);
all_reps_NRS = zeros(num_list_lengths, sim.num_repetitions_for_error_bars);

disp('Starting simulations for different list lengths...');

% --- Start Parallel Pool (if not already open) ---
% This ensures that `parfor` has workers available.
if isempty(gcp('nocreate'))
    parpool;
end

% --- Loop to Simulate For Each List Length ---
for ll_idx = 1:num_list_lengths
    
    % Update the current list length for the simulation
    current_list_length = sim.list_lengths_to_simulate(ll_idx);
    % We need a local copy of sim.list_length for each parfor iteration
    % or pass it as a parameter if it changes per iteration.
    % Here, current_list_length is constant for the inner parfor loop, so it's fine.
    
    fprintf('\n--- List Length: %d ---\n', current_list_length);
    
    % --- Loop to Repeat Simulations For Each List Length (to calculate Error Bars) ---
    % THIS IS THE LOOP TO PARALLELIZE
    parfor rep_idx = 1:sim.num_repetitions_for_error_bars
        % To ensure reproducibility of random numbers within each worker's
        % stream for `parfor`, you might want to manage the random number
        % stream here if precise per-replication reproducibility is critical
        % beyond the overall average. For general simulation, often not strictly
        % necessary, as `parfor` handles separate streams.
        % For example: rng(rep_idx + ll_idx * sim.num_repetitions_for_error_bars);

        % --- Initialize Performance Metrics for current list length and repetition ---
        total_hits = 0;
        total_false_alarms = 0;
        
        % Initialize arrays to store phi values for d' and NRS calculation for THIS list length and THIS repetition
        all_phi_targets = zeros(1, sim.num_simulations_per_point);
        all_phi_lures = zeros(1, sim.num_simulations_per_point);
        
        % --- Loop to Simulate Each Point ---
        for sim_idx = 1:sim.num_simulations_per_point
            % --- Generate Study List and Simulate Storage ---
            % Initialize an empty array of word vectors
            study_words = cell(current_list_length, 1);
            % Initialize an empty array of episodic images
            memory_images = zeros(current_list_length, param.num_total_features);
            
            % For the number of words in the list length
            for i = 1:current_list_length
                % Create a word vector representation from the geometric distribution
                study_words{i} = generate_word_vector(param.num_total_features, param.w_word_features, param.g);
                % Store the word in memory as an episodic image, which may have errors
                memory_images(i, :) = store_word_into_memory(study_words{i}, param.u_star, param.t, param.c, param.g);
            end
            
            % --- Simulate a Target Trial (Recognition of a Studied Word) ---
            % Randomly select one studied word to be the target probe
            target_idx = randi(current_list_length);
            probe_target = study_words{target_idx};
            
            % Calculate the overall odds (phi) for the target probe
            phi_target = calculate_overall_odds(probe_target, memory_images, param.c, param.g);
            
            % Make recognition decision
            if phi_target >= param.criterion
                total_hits = total_hits + 1;
            end
            
            % Store phi_target for later calculation of d' and NRS
            all_phi_targets(sim_idx) = phi_target;
            
            % --- Simulate a Lure Trial (Recognition of an Unstudied Word) ---
            % Generate a new word that was NOT in the study list (a l)
            probe_distractor = generate_word_vector(param.num_total_features, param.w_word_features, param.g);
            
            % Calculate the overall odds (phi) for the distractor probe
            phi_distractor = calculate_overall_odds(probe_distractor, memory_images, param.c, param.g);
            
            % Make recognition decision
            if phi_distractor >= param.criterion
                total_false_alarms = total_false_alarms + 1;
            end
            
            % Store phi_distractor for later calculation of d' and NRS
            all_phi_lures(sim_idx) = phi_distractor;
        end
        
        % --- Calculate and Store Results for Current List Length and Repetition ---
        % Probability of hits for the current criterion
        P_H_current = total_hits / sim.num_simulations_per_point;
        all_reps_PH(ll_idx, rep_idx) = P_H_current; % Sliced variable
        
        % Probability of false alarms for the current criterion
        P_F_current = total_false_alarms / sim.num_simulations_per_point;
        all_reps_PF(ll_idx, rep_idx) = P_F_current; % Sliced variable
        
        % Calculate d' for the current list length and repetition
        z_hit_current = norminv(P_H_current, 0, 1);
        z_false_alarm_current = norminv(P_F_current, 0, 1);
        d_prime_current = z_hit_current - z_false_alarm_current;
        all_reps_d_prime(ll_idx, rep_idx) = d_prime_current; % Sliced variable
        
        % --- NRS (Normal-ROC Slope) Calculation for Current List Length and Repetition ---
        % Calculate P(H) and P(F) for each ROC criterion from the collected phi distributions
        roc_PH_current_ll_rep = zeros(1, length(roc_criteria));
        roc_PF_current_ll_rep = zeros(1, length(roc_criteria));
        for i = 1:length(roc_criteria)
            current_roc_criterion = roc_criteria(i);
            roc_PH_current_ll_rep(i) = sum(all_phi_targets >= current_roc_criterion) / sim.num_simulations_per_point;
            roc_PF_current_ll_rep(i) = sum(all_phi_lures >= current_roc_criterion) / sim.num_simulations_per_point;
        end
        
        % Convert ROC points to z-scores
        z_roc_PH = norminv(roc_PH_current_ll_rep, 0, 1);
        z_roc_PF = norminv(roc_PF_current_ll_rep, 0, 1);
        
        % Filter out non-finite values (Inf or -Inf) as they cannot be used in linear regression
        valid_indices_roc = isfinite(z_roc_PH) & isfinite(z_roc_PF);
        z_roc_PH_filtered = z_roc_PH(valid_indices_roc);
        z_roc_PF_filtered = z_roc_PF(valid_indices_roc);
        
        nrs_current = NaN; % Initialize NRS as NaN in case calculation fails
        if length(z_roc_PF_filtered) >= 2
            % Fit a linear regression line to the z-ROC points
            coefficients_roc = polyfit(z_roc_PF_filtered, z_roc_PH_filtered, 1);
            nrs_current = coefficients_roc(1); % The first coefficient is the slope
        else
            % disp('Warning: Not enough valid (P(F), P(H)) pairs for NRS calculation for this list length and repetition.');
        end
        all_reps_NRS(ll_idx, rep_idx) = nrs_current; % Sliced variable
    end
end

disp('--- All Simulations Complete ---');

% --- Calculate Mean and Standard Deviation Across Repetitions ---
% Mean forp robability of hits
mean_PH = mean(all_reps_PH, 2)';
% Standard deviation for probability of hits
std_PH = std(all_reps_PH, 0, 2)';

% Mean for probability of false alarms
mean_PF = mean(all_reps_PF, 2)';
% Standard deviation for probability of false alarms
std_PF = std(all_reps_PF, 0, 2)';

% Mean for d'
mean_d_prime = mean(all_reps_d_prime, 2)';
% Standard deviation for d'
std_d_prime = std(all_reps_d_prime, 0, 2)';

% Mean for NRS
mean_NRS = mean(all_reps_NRS, 2)';
% Standard deviation for NRS
std_NRS = std(all_reps_NRS, 0, 2)';

fprintf('\n--- Final Mean Results Across Repetitions ---\n');
for i = 1:num_list_lengths
    fprintf('List Length %d:\n', sim.list_lengths_to_simulate(i));
    fprintf('  Mean P(H): %.4f (SD: %.4f)\n', mean_PH(i), std_PH(i));
    fprintf('  Mean P(F): %.4f (SD: %.4f)\n', mean_PF(i), std_PF(i));
    fprintf('  Mean d'': %.4f (SD: %.4f)\n', mean_d_prime(i), std_d_prime(i));
    fprintf('  Mean NRS: %.4f (SD: %.4f)\n', mean_NRS(i), std_NRS(i));
end

% --- Plotting Results with Error Bars ---
% Create a new figure for the plots
figure; 
% Adjust figure size for vertical stacking
set(gcf, 'Units', 'normalized', 'Position', [0.1 0.1 0.5 0.9]);

% Common X-axis settings for all plots
x_labels = arrayfun(@num2str, sim.list_lengths_to_simulate, 'UniformOutput', false);

% Plot 1: d' vs. List Length
% 3 rows, 1 column, first plot
subplot(3, 1, 1);
errorbar(sim.list_lengths_to_simulate, mean_d_prime, std_d_prime, 'o-', 'LineWidth', 1.5, 'Color', 'g');
title('d-prime (d'')');
xlabel('List Length (n)');
ylabel('d''');
grid on;
xticks(sim.list_lengths_to_simulate);
xticklabels(x_labels);
xlim([min(sim.list_lengths_to_simulate) - 2, max(sim.list_lengths_to_simulate) + 2]);

% Plot 2: Hit Rate and False Alarm Rate vs. List Length
% 3 rows, 1 column, second plot
subplot(3, 1, 2);
errorbar(sim.list_lengths_to_simulate, mean_PH, std_PH, 'o-', 'LineWidth', 1.5, 'Color', 'b', 'DisplayName', 'Hit Rate P(H)');
hold on;
errorbar(sim.list_lengths_to_simulate, mean_PF, std_PF, 's-', 'LineWidth', 1.5, 'Color', 'r', 'DisplayName', 'False Alarm Rate P(F)');
hold off;
title('Hit Rate and False Alarm Rate');
xlabel('List Length (n)');
ylabel('Probability');
grid on;
xticks(sim.list_lengths_to_simulate);
xticklabels(x_labels);
xlim([min(sim.list_lengths_to_simulate) - 2, max(sim.list_lengths_to_simulate) + 2]);
legend('show', 'Location', 'best');

% Plot 3: Normal ROC Slope (NRS) vs. List Length
% 3 rows, 1 column, third plot
subplot(3, 1, 3);
errorbar(sim.list_lengths_to_simulate, mean_NRS, std_NRS, 'o-', 'LineWidth', 1.5, 'Color', 'm');
title('Normal ROC Slope (NRS)');
xlabel('List Length (n)');
ylabel('NRS');
grid on;
xticks(sim.list_lengths_to_simulate);
xticklabels(x_labels);
xlim([min(sim.list_lengths_to_simulate) - 2, max(sim.list_lengths_to_simulate) + 2]);
sgtitle('REM.1 List Length and Predictions with SEM Error Bars');

% --- Helper Functions (No changes needed for parfor) ---
% Function to generate a word vector with 'w' non-zero features; the remaining features are zeros
function word_vector = generate_word_vector(num_total_features, w_word_features, g_param)
    word_vector = zeros(1, num_total_features);
    feature_indices = randperm(num_total_features, w_word_features);
    feature_values = geornd(g_param, 1, w_word_features) + 1;
    word_vector(feature_indices) = feature_values;
end

% Function to simulate storing a word into memory
function episodic_image = store_word_into_memory(word_vector, u_star, t_attempts, c_copy, g_param)
    episodic_image = zeros(size(word_vector));
    word_nz_indices = find(word_vector ~= 0);
    for k = word_nz_indices
        original_val = word_vector(k);
        feature_stored = false;
        for attempt = 1:t_attempts
            if rand() < u_star
                if rand() < c_copy
                    episodic_image(k) = original_val;
                else
                    random_val = geornd(g_param) + 1;
                    episodic_image(k) = random_val;
                end
                feature_stored = true;
                break;
            end
        end
    end
end

% Function to calculate the likelihood ratio for a single image given a probe
function lambda_j = calculate_lambda_single_image(probe_vector, image_vector, c_copy, g_param)
    lambda_j = 1.0;
    for k = 1:length(probe_vector)
        probe_val = probe_vector(k);
        image_val = image_vector(k);
        if probe_val ~= 0 && image_val ~= 0
            if probe_val == image_val
                denominator = g_param * ((1 - g_param)^(probe_val - 1));
                if denominator > eps
                     lambda_j = lambda_j * ((1 - c_copy) + c_copy / denominator);
                else
                    lambda_j = lambda_j * 1e10;
                end
            else
                lambda_j = lambda_j * (1 - c_copy);
            end
        end
    end
end

% Function to calculate the overall odds (phi) for a probe
function phi = calculate_overall_odds(probe_vector, memory_images, c_copy, g_param)
    sum_lambda = 0;
    n_images = size(memory_images, 1);
    for i = 1:n_images
        current_image = memory_images(i, :);
        sum_lambda = sum_lambda + calculate_lambda_single_image(probe_vector, current_image, c_copy, g_param);
    end
    if n_images > 0
        phi = sum_lambda / n_images;
    else
        phi = 0;
    end
end